@using RPPP21APP.ViewModels;
@model IndexWorkerViewModel

@{
    ViewData["Title"] = "Index";
}

@{
    bool isAuthenticated = User.Identity?.IsAuthenticated == true;

    int resultStart = ((Model.Page - 1) * Model.PageSize) + 1;
    int resultEnd = Math.Min(resultStart + Model.PageSize - 1, Model.TotalWorkers);

    bool isValidPage = resultStart <= Model.TotalWorkers;

    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<h1>Workers</h1>


<p>
    <a asp-action="Create" class="btn btn-primary">Create New</a>
</p>

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            @if (isValidPage)
            {
                <a type="button" class="btn btn-sm btn-primary @prevDisabled"
               asp-action="Index" asp-route-page="@(Model.Page - 1)">
                    Prev
                </a>
                <a type="button" class="btn btn-sm btn-primary @nextDisabled"
               asp-action="Index" asp-route-page="@(Model.Page + 1)">
                    Next
                </a>
                <span class="text-muted text-small">Results @resultStart - @resultEnd of @Model.TotalWorkers</span>
            }
    </div>
</div>

<div class="table-responsive">
<table class="table table-hover table-dark">
    <thead>
        <tr>
            <th scope="col">
                        @Html.DisplayNameFor(model => Model.Workers.FirstOrDefault().Name)
            </th>
            <th scope="col">
                        @Html.DisplayNameFor(model => Model.Workers.FirstOrDefault().Surname)
            </th>
            <th scope="col">
                        @Html.DisplayNameFor(model => Model.Workers.FirstOrDefault().Salary)
            </th>
            <th scope="col">
                        @Html.DisplayNameFor(model => Model.Workers.FirstOrDefault().PhoneNumber)
            </th>
            <th scope="col">
                        @Html.DisplayNameFor(model => Model.Workers.FirstOrDefault().Experience)
            </th>
            <th scope="col">
                        @Html.DisplayNameFor(model => Model.Workers.FirstOrDefault().WorkingHours)
            </th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Workers) {
        <tr>
            <td scope="row">
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Surname)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Salary)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PhoneNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Experience)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.WorkingHours)
            </td>
            <td>
                    <a asp-action="Edit" asp-route-id="@item.WorkerId" class="btn btn-secondary mr-2">Edit</a>
                    <a asp-action="Delete" asp-route-id="@item.WorkerId" class="btn btn-danger">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
</div>
